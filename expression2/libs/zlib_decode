@persist  Z_MyTable:table  #persisted variables not needed for functioning as library
@persist Z_MyOutputTable:table
@persist Z_DataOut:table Z_Data:string Z_Bytes:table Z_DataOutString:string
@persist Z_BFinal:number Z_BType
@persist Z_Task:string Z_SubTask:number
@persist [Z_LitLengthTree Z_DistanceTree]:table   # tree data # NEEDS TO BE SIMPLIFIED AND REDONE
@persist [Z_LenExtraBits Z_DistExtraBits Z_DistanceBase Z_LengthBase]:array # Constant lookup tables
@persist Z_CurrentLength Z_CurrentCode
@persist Z_Inc #incrementing variable 
@persist Z_TestString:string Z_TestTree:table
@persist Z_NLit Z_NDist Z_NCLen Z_CodeLenLengths:array Z_CodeLenLengthsOrder:array Z_CodeLengthTree:table Z_CodeLengths:array
@persist Z_LiteralLenLengths:array Z_DistanceLengths:array
@outputs Test_len Test_count
#[LiteralLenLengths DistanceLengths LiteralLenLengthsFull DistanceLengthsFull]:array
#[ NOTES:
    MUST DO
    decoder is not compliant with rfc 1951 and rfc 1950
    1950:
        add alder32 checksum support
        actually take into account FDICT when decoding data
    1951:
        multi block support
        
        
    
    NEED TO FIX
    haveing to use an odd workaround for dynamic tree gen
    setting a local variable to the persisted var and then clearing the persisted var
    
    NEED TO IMPLEMENT 
    and check FDICT and FLEVEL
    
    NEED TO IMPROVE
    optimize block decoding to start by reading the minimum bits that make up a code
    More modular design
    clean up code
    leass random variablesss
    less random comments and less prints
    
]#

# includes that require running on tick

#include "libs/TreeGen"
#include "libs/safe_print"
Test_count = Z_Bytes["current_byte", number]
if(first()) {
    #include "libs/Bytes"
    #include "libs/colors"
    
    Z_DistanceBase =  array(1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577)
    Z_LengthBase = array(3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258)
    Z_LenExtraBits = array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0)
    Z_DistExtraBits = array(0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13)
    
    Z_CodeLenLengthsOrder = array(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15)
    function void string:zlibDecodeInto(T:table) { 
        # decodes into the table passed at keys
        # "data" string and "done" number and "error"
        # you can check the empty table you passed in periodically to tell if the data is finished decoding
      
        #initialize table
        T["done", number] = 0
        T["error", string] = ""
        T["data", string] = ""
        Z_DataOut = T
        
        Z_Data = This
        Test_len = This:length()
        Z_Bytes = newBytesReader(Z_Data)
        
        local CMF = Z_Bytes:readByte()
        if(CMF != 0x78 & 0) {
            T["done", number] = 1
            T["error", string] = "unspoorted compression method or flag"   
            return
        }
        local FLG = Z_Bytes:readByte()
        
        if((CMF*256 + FLG)%31!=0) {
            T["done", number] = 1
            T["error", string] = "FCHECK failed CMF and FLG aer not a multiple of 31" 
            return
        }
        Z_BFinal = Z_Bytes:readBits(1)
        Z_BType = Z_Bytes:readBits(2)
        #print(Z_BType+"TEST"+Z_BFinal)
        # reset tree gen variables
        Z_LitLengthTree = table() # not great naming these are just lookup tables for looking up a code and its actual value
        Z_DistanceTree = table()
        
        Z_Task = "read_tree"
        Z_SubTask = 0
        Z_Inc = 1
        
    }
    
   
    runOnTick(1)
  
    
}  elseif(tickClk()) { 
    switch(Z_Task) {
    case "read_tree",  # reads the tree from the data

        while(perf()) {
            if(Z_BType == 0) {
                Z_DataOut["error", string] = "cant handle uncompressed deflate data yet"
                Z_DataOut["done", number] = 1   
                Z_Task = ""
                break
            } elseif (Z_BType == 1) {
                #passing the entire array in saves performance I guess
                local A = array(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8)
                Z_MyOutputTable = table()
                A:generateTreeLookupInto(Z_MyOutputTable)
                Z_Task = "gen_tree"
                Z_SubTask = 0
                Z_Inc = 1
            } elseif(Z_BType == 2) {
                switch(Z_SubTask) {
                case 0,
                    Z_NLit =Z_Bytes:readBits(5)+257
                    Z_NDist = Z_Bytes:readBits(5)+1
                    Z_NCLen = Z_Bytes:readBits(4)+4
                   
                    Z_SubTask++
                    Z_Inc = 1
                    Z_CodeLenLengths = array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                break
                case 1,
            
                    while(perf()) {


                        local V = Z_Bytes:readBits(3)

                        Z_CodeLenLengths[Z_CodeLenLengthsOrder[Z_Inc, number]+1, number] = V
                        
                        Z_Inc++
                        if(Z_Inc>Z_NCLen) {

                            Z_SubTask++
                            break   
                        }
                        
                    }            
                
                break
                case 2,
                    while(perf()) {
                           
                        
                            local I = Z_CodeLenLengths:minIndex()
                            if(Z_CodeLenLengths[I, number] ==0 & 0) {
                                # CodeLenLengths:remove(I)    
                                
                            } else {
                                Z_MyOutputTable = table()
                                Z_Inc = 1
  
                                Z_CodeLenLengths:generateTreeLookupInto(Z_MyOutputTable)
                                Z_SubTask++
                                break
                            }
                    }
                    
                break
                case 3,
                    if(Z_MyOutputTable["done", number] == 1){
                        Z_CodeLengthTree =  Z_MyOutputTable["data", table]
                        Z_SubTask++ 
            
                        Z_CodeLengths = array()
                        Z_CurrentCode = 0
                        Z_CurrentLength = 0
                    }
                
                break
                case 4,
        
                    while(perf()) {
                        Z_CurrentCode = Z_CurrentCode*2 + Z_Bytes:readBits(1)
                       
                        Z_CurrentLength++
         
 
                        if(Z_CodeLengthTree:exists(Z_CurrentLength) & Z_CodeLengthTree[Z_CurrentLength,table]:exists(Z_CurrentCode)) {
                             
                            local R = Z_CodeLengthTree[Z_CurrentLength, table][Z_CurrentCode, number]
         
         
                            local V = 0
                            local Count = 0
                            if(R <= 15 & R >= 0){ 
                                Count = 1
                                V = R
                            } elseif(R == 16){
                                
                                #copy code lenght x times
                                V = Z_CodeLengths[Z_CodeLengths:count(), number]
                                Count = 3+Z_Bytes:readBits(2)
                            } elseif(R==17) {
                                Count = 3 + Z_Bytes:readBits(3)
                                V = 0
                            
                            } elseif(R==18) {
                                V=0
                                Count = 11 + Z_Bytes:readBits(7)
  
                            }
                            local A = array()
                            for(I=1, Count) {
                                A:pushNumber(V)     
                            }
                    
                            Z_CodeLengths = Z_CodeLengths:add(A)
                            Z_Inc +=Count
                            Z_CurrentCode = 0
                            Z_CurrentLength = 0
                        }
                        
                        if(Z_Inc>(Z_NLit+Z_NDist)){
                            Z_Inc = 1
                            Z_SubTask++
                            break
    
                        }    
                        
                    }
                break
                case 5,
                      while(perf()) {
                       
                        if(Z_Inc<=Z_NLit ) {
                           
                            local V = Z_CodeLengths[Z_Inc, number]
                            Z_LiteralLenLengths:pushNumber(V)

                            Z_Inc++
                        } elseif( Z_Inc <= ( Z_NLit+ Z_NDist)) {
                           
                            local V =  Z_CodeLengths[ Z_Inc, number]
   
                             Z_DistanceLengths:pushNumber(V)

                             Z_Inc++
                        } else {
                             Z_Task = "gen_tree"
                            
                            local A =  Z_LiteralLenLengths:clone() # this is an odd fix... and it needs to be addressed
                             Z_MyOutputTable = table()
                        
                            A:generateTreeLookupInto( Z_MyOutputTable)
                            Z_LiteralLenLengths:clear()
                            Z_Inc = 1
                            Z_SubTask = 0
        
                        }
                       
                        
                        
                    } 
     
         
                break
                }
            } 
            
        }
    
    
    
    break

    case "gen_tree", # NEEDS TO BE SIMPLIFIED AND REDONE
        switch(Z_SubTask) {
        
        case 0,
            
            if( Z_MyOutputTable["done", number] == 1) {
                if( Z_BType == 1) {
                     Z_LitLengthTree =  Z_MyOutputTable["data", table]
                    
                    #print(Z_LitLengthTree[9,table][0x16F,number]+"L")
                    Z_Inc = 0
                    Z_CurrentCode = 0
                    Z_CurrentLength = 0  
                    Z_Task = "decode_block"
                    Z_SubTask++
                    
                }   elseif(Z_BType == 2) {
                
                    Z_LitLengthTree = Z_MyOutputTable["data", table]
                    Z_MyOutputTable = table()
                    
                    local A = Z_DistanceLengths
                    A:generateTreeLookupInto(Z_MyOutputTable)
                    Z_SubTask++
                        
                }
                
                
            }    
        
        break
        case 1,
            if(Z_MyOutputTable["done", number] == 1) {

                Z_DistanceTree = Z_MyOutputTable["data", table]
                Z_Inc = 0
                Z_CurrentCode = 0
                Z_CurrentLength = 0   
                Z_SubTask = 0
                Z_Task = "decode_block"
            }
   
        break
        
        
        }
    break
    case "decode_block",
        while(perf(80)) {
            Z_CurrentCode = Z_CurrentCode*2 + Z_Bytes:readBitsR(1)
            Z_CurrentLength++
            if(Z_LitLengthTree:exists(Z_CurrentLength) & Z_LitLengthTree[Z_CurrentLength,table]:exists(Z_CurrentCode)) {
                #print(Z_Bytes["current_byte", number])
                local Value = Z_LitLengthTree[Z_CurrentLength,table][Z_CurrentCode,number]
            
                if(Value<256) {     
                    local Char = toChar(Value) 
                    #printSafe(format("found symbol 0x%s of len %s mapping to 0x%s", Z_CurrentCode:toString(16), Z_CurrentLength, Value:toString(16)))
                    Z_DataOutString += Char
    
                    Z_CurrentCode=0
                    Z_CurrentLength=0
                } elseif(Value==256) {
    
                    if(Z_BFinal) {
                        Z_DataOut["done", number] = 1
                        Z_DataOut["data", string] = Z_DataOutString
                    }  else {
                    
                        printSafe("THIS REALLY NEEDS TO BE IMPLEMENTED line  354")
                    }
                    Z_Task=""
                    break    
                }
                elseif(Value>=257 & Value<=285) {
                    #print("found "+Value:toString(16)+" len of"+Z_CurrentLength)
                    local LEB = Z_Bytes:readBits(Z_LenExtraBits[Value-256, number])
                    local Length = Z_LengthBase[Value-256,number] + LEB
                    local Distance = 1
     
                    if(Z_BType==1) {
                        local D= Z_Bytes:readBitsR(5)
                        local DEB = Z_Bytes:readBits(Z_DistExtraBits[D+1, number])
                        Distance = Z_DistanceBase[D+1,number] +DEB
                        
                    } elseif(Z_BType == 2) {
                        local CurDist = 0# current distance code
                        CurDistLen=0
                        I2=1
                        while(1) {
                            CurDist = CurDist*2 +Z_Bytes:readBitsR(1)
                            CurDistLen++
                            if(Z_DistanceTree:exists(CurDistLen) & Z_DistanceTree[CurDistLen, table]:exists(CurDist)) {
                                local D = Z_DistanceTree[CurDistLen, table][CurDist, number]
                                local DEB = Z_Bytes:readBits(Z_DistExtraBits[D+1, number]) 
                                Distance = Z_DistanceBase[D+1, number]+DEB
                                break
                            }
                            
                        }

                    }
                    
                    local Chars = ""
                    if(Distance>=Length) {
                        Chars = Z_DataOutString:sub(-Distance, -Distance+Length-1)   
                    } else {
                        local C = Z_DataOutString:sub(-Distance, -Distance+min(Length, Distance)-1)
                        Chars += C   
                        Length-=Distance 
                        while(1) {
                           Chars += C:sub(-Distance, -Distance+min(Length, C:length())-1)      
                           Length-=C:length()
                           if(Length<=0) {
                                break
                            
                            }
                        }
                    }
                    Z_DataOutString+=Chars
                    Z_CurrentCode=0
                    Z_CurrentLength=0
                }
            } 
            
        }
        Z_DataOut["data", string] = Z_DataOutString
    
    
    break
    
    
       
        
    }
} 
