@name Random Maze Generator by PCL ('HMM)
@persist Cell_stack:table Cells:table H_index Task:string X_I Y_I Grid_size Cell_size
@persist PB_X PB_Y PB_current_dir Interval MProp:entity PSpawn_interval

#e2 by PCL (HMM')
#http://steamcommunity.com/profiles/76561198115172591
if(first())
{
    
    Grid_size =17 # size of maze
    Interval = 10 # interval for maze generation
    PSpawn_interval = 1000# interval for spawning props 
    
    #probably shouldnt change anything past here
    
    
    H_index = 1
    Cells = table()
    Cell_size = 140 #140
    #MProp = propSpawn("models/hunter/blocks/cube025x025x025.mdl",entity():pos(),1)
    #uses recursive backtrack method or depth first search tbh idk even know what its called
    #3x6 plates
    function void holo_line(Index:number,Start:vector,End:vector)
    {
        Midpoint = (Start+End)/2
        holoCreate(Index)
        holoScaleUnits(Index, vec(Start:distance(End)+5,5,7.5))
        holoPos(Index,(Start+End)/2)
        holoColor(Index,vec(100,255,100))
        local A = (Start-End):normalized()
        holoAng(Index,A:toAngle())

    }
    function array array:remove_vector2(V2:vector2)
    {
        for(I=1,This:count())
        {
            if(This[I,vector2]==V2)
            {
                This:remove(I)
                
                return This
            }
            
        }
    }
    function angle wall_angle(V2:vector2)
    {
        # a horribly unelegant solution due to a lack of planning
        #array(vec2(0,1),vec2(0,-1),vec2(1,0),vec2(-1,0))
        
        local Angs = table()
        if(V2==vec2(0,1)) {
            return ang(0,0,0)
        } elseif(V2==vec2(0,-1)) {
            return ang(0,0,0)
        } elseif(V2==vec2(1,0)) {
            return ang(0,90,0)
        } elseif(V2==vec2(-1,0)) {
            return ang(0,90,0)
        }
        return ang(0,22,130)
    }
    function vector2 inverse_vec2(V2:vector2)
    {
        local X = 0
        local Y = 0
        if(V2:x() == 0 )
        {
            X = 0
        }
        else
        {
            X = 0-V2:x()
        }
        if(V2:y() == 0)
        {
            Y = 0
        }
        else
        {
            Y = 0-V2:y()
        }
        return vec2(X,Y)
    }
    function table create_cell(X,Y)
    {
        local C = table()
        #1 is up #2 is down #3 is left #4 is right 
        C["walls",array] = array(vec2(0,1),vec2(0,-1),vec2(1,0),vec2(-1,0))
        C["visited",number] = 0
        C["pos",vector2] = vec2(X,Y)
        holoCreate(H_index)
        holoPos(H_index,vec(X*Cell_size,Y*Cell_size,10)+entity():pos())
        holoScaleUnits(H_index,vec(Cell_size-0.3,Cell_size-0.3,4))
        #holo_line(H_index,vec(X*Size,Y*Size,10)+entity():pos(),vec(X*Size,(Y+1)*Size,10)+entity():pos())
        H_index++
        return C
    }
    function vector2 create_path(Size:number, X,Y)
    {
        Cells[Size*(Y-1)+X,table]["visited",number] = 1
        Directions = array(vec2(0,1),vec2(0,-1),vec2(1,0),vec2(-1,0))
        local Inverse = array(2,1,4,3)
        while(Directions:count()>0)
        {
            local Int = randint(1,Directions:count())
            local D = Directions:removeVector2(Int)
            
            local New_pos = vec2(X,Y)+D
            #print(New_pos)
            if(New_pos:x()>0&New_pos:y()>0&New_pos:x()<Size+1&New_pos:y()<Size+1)
            {
                
                if(Cells[Size*(New_pos:y()-1)+New_pos:x(),table]["visited",number] == 0)
                {
                    Cells[Size*(Y-1)+X,table]["walls",array]:remove_vector2(D)
                    Cells[Size*(New_pos:y()-1)+New_pos:x(),table]["walls",array]:remove_vector2(inverse_vec2(D))
                    Cells[Size*(New_pos:y()-1)+New_pos:x(),table]["visited",number] = 1
                    holoColor(Size*(New_pos:y()-1)+New_pos:x(),vec(140,140,255))
    
                    holo_line(H_index,vec(X*Cell_size,Y*Cell_size,9)+entity():pos(),vec(New_pos:x()*Cell_size,New_pos:y()*Cell_size,9)+entity():pos())
                    H_index++
                    return New_pos
                }
            }
        }
        return vec2(-1,-1) 
    }
    function void create_wall(X:number,Y:number,D:vector2)
    {
        if(Y<=Grid_size & X<=Grid_size)
        {
            if(Cells[Grid_size*(Y+D:y()-1)+X+D:x(),table]["visited",number]!=2 | Y+D:y()>Grid_size | X+D:x()>Grid_size | Y+D:y()<1 | X+D:x()<1)
            {
                if(!propCanCreate())
                {
                    print("interval to fast to spawn props Increase PSpawn_interval and replace e2")
                }
                P = propSpawn("models/hunter/plates/plate3x16.mdl",vec(X*Cell_size,Y*Cell_size,100)+entity():pos()+vec(D:x(),D:y(),0)*Cell_size/2+vec(0,0,175),wall_angle(D)+ang(0,0,90),1)
                P:setMaterial("models/props_canal/metalwall005b")
            }
            
        }
        
        
    }
    Task = "create_cells"
    Cells = table()
    X_I = 1
    Y_I = 1

}

interval(Interval)
if(Task=="create_path")
{
    while(perf())
    {
        local C = Cell_stack[Cell_stack:count(),table]
        holoColor(Grid_size*(C["pos",vector2]:y()-1)+C["pos",vector2]:x(),vec(140,140,255))
        local N = create_path(Grid_size,C["pos",vector2]:x(),C["pos",vector2]:y())
        if(Cell_stack:count()<1)
        {
            Task = "create_walls"
            PB_X = 1
            PB_Y = 1
            Interval = PSpawn_interval
            #PB_current_pos = vec2(1,1)
            #holoDeleteAll()
           
        }
        if(N!=vec2(-1,-1))
        {
            if(!holoCanCreate()) 
            {
                print("holo cant create")
            }
            holoColor(Grid_size*(N:y()-1)+N:x(),vec(255,100,100))
            Cell_stack:pushTable(Cells[Grid_size*(N:y()-1)+N:x(),table])
            break
        }
        else
        {
            local C = Cell_stack[Cell_stack:count(),table]
            holoColor(Grid_size*(C["pos",vector2]:y()-1)+C["pos",vector2]:x(),vec(140,140,255))
            Cell_stack:pop()
            
            local C = Cell_stack[Cell_stack:count(),table]
            holoColor(Grid_size*(C["pos",vector2]:y()-1)+C["pos",vector2]:x(),vec(255,100,100))
            break
        }
         
        
    }
}
elseif(Task=="create_cells")
{


    while(perf())
    {
        
        if(Y_I<=Grid_size)
        {
            if(X_I<=Grid_size)
            {
                Cells:pushTable(create_cell(X_I,Y_I))
                X_I++
            }
            else
            {
                X_I=1
                Y_I++
            }
        }
        else
        {
            Task="create_path"
            Cell_stack = table()
            Cell_stack:pushTable(Cells[1,table])
        }
        
    }
}
elseif(Task=="create_walls")
{

    while(perf())
    {
        if(PB_Y<=Grid_size)
        {
            if(PB_X<=Grid_size)
            {

                while(Cells[Grid_size*(PB_Y-1)+PB_X,table]["walls",array]:count()>0)
                {
        
                    Dir = Cells[Grid_size*(PB_Y-1)+PB_X,table]["walls",array]:popVector2()
                    #print(Dir)
                    H_index++
                    
                    create_wall(PB_X,PB_Y,Dir)
                    
                    
                }
                Cells[Grid_size*(PB_Y-1)+PB_X,table]["visited",number] = 2
                PB_X++
                break
            }
            else
            {
                PB_X=1
                PB_Y++
                break
            }
        }
        else
        {
            holoDeleteAll()
            Task = ""
        }
    }
    
}
